---
title: "Ukraine IDPs and War Fire Events"
author: "Andrea Nasuto"
format: html
editor: visual
---

## War Fire

Here Some Description

## Code

### Load Data

```{r}
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(ggcorrplot)
library(tmap)
library(tmaptools)
library(ggspatial)
library(plotly)
library(tibble)
library(biscale)
library(cowplot)
library(shiny)
library(htmlwidgets)
```

### Load Data

```{r}
# read the csv file
war_fires <- read.csv("data/war_fire/ukraine_war_fires.csv")
```

```{r}
head(war_fires)
```

```{r}
# convert date column to date type
war_fires$date <- ymd(war_fires$date)
```

### Select data with Feb - Aug 2022

```{r}
# get the earliest date of the dataset
print(min(war_fires$date))
```

```{r}
# define start and end dates
start_date <- ymd("2022-02-24")
end_date <- ymd("2022-08-31")

# filter activities within the date range
war_fires_filtered <- war_fires %>%
  filter(date >= start_date & date <= end_date)

# display the first few rows of the filtered data
head(war_fires_filtered)
```

```{r}
# read shapefiles
oblasts <- st_read("data/shapefiles/oblasts/oblasts.shp") 
raions <- st_read("data/shapefiles/raions/raions.shp")

#oblasts <- st_read("data/gadm41_UKR_shp/gadm41_UKR_1.shp")[-1,] # skip first row
#raions <- st_read("data/gadm41_UKR_shp/gadm41_UKR_2.shp")[-1,] # skip first row
```

```{r}
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))

# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
  oblast_name = unique(oblasts$ADM1_EN), #ADM1_EN for correct raions
  week = weeks$week
)

# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")

# raion
all_raion_weeks <- expand.grid(
  raion_name = unique(raions$ADM2_EN), #ADM2_EN for correct raions
  week = weeks$week
)
# get the week number
all_raion_weeks <- merge(all_raion_weeks, weeks %>% select(week, week_number), by = "week")
```

```{r}
# create spatial dataset from war_fires_filtered
war_fires_filtered_geom <- st_as_sf(war_fires_filtered, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) # set crs to WGS84

# ensure geometry is valid
war_fires_filtered_geom = sf::st_make_valid(war_fires_filtered_geom)

war_fires_filtered_geom <- st_transform(war_fires_filtered_geom, crs = 4326)  # Use appropriate CRS
```

```{r eval=FALSE}
# set tmap to interactive mode
tmap_mode("view")

# Create the interactive map
war_fire_map <- tm_shape(war_fires_filtered_geom) +
  tm_basemap(server = "OpenStreetMap") +
  tm_dots() +
  tm_layout(title = "War-Fire Events")

war_fire_map <- tm_shape(war_fires_filtered_geom) +
  tm_basemap(server = "OpenStreetMap") +
  tm_dots() +
  tm_layout(title = "War-Fire Events")

# Create the tmap element
raions_GADM_map <- tm_shape(raions) +
  tm_borders() +  # Only show boundaries
  tm_fill(alpha = 0)  # Make the fill transparent

#war_fire_map + raions_GADM_map
```

### Aggregate war-fire events at raion and oblast level

```{r warning=FALSE, message= FALSE}
# rename war_fires_filtered_geom
wf <- war_fires_filtered_geom

# ensure both shapefiles and events are in the same CRS
oblasts <- st_transform(oblasts, st_crs(wf))
raions <- st_transform(raions, st_crs(oblasts))

# spatial join to add oblast and raion info to the events
wf_oblasts <- st_join(oblasts, wf, left = TRUE) # deselect date with correct raions shp
wf_raions <- st_join(raions, wf, left = TRUE) # deselect date with correct raions shp

# rename area name variables
wf_oblasts <- wf_oblasts %>% rename(oblast_name = ADM1_EN) #ADM2_EN for correct raions
wf_raions <- wf_raions %>% rename(raion_name = ADM2_EN) #ADM2_EN for correct raions
```

#### Aggregate at weekly level

```{r}
# aggregate by oblast and week
oblast_weekly <- wf_oblasts %>%
  group_by(oblast_name, week) %>%
  summarise(count = n(), .groups = 'drop')

# aggregate by raion and week
raion_weekly <- wf_raions %>%
  filter(!is.na(fire)) %>% # exclude events where 'fire' is NA
  group_by(raion_name, week) %>%
  summarise(count = n(), .groups = 'drop')
```

```{r}
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c('oblast_name', 'week'))

# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0

# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM1_EN, geometry), by = c("oblast_name" = "ADM1_EN"))

# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c('raion_name', 'week'))

# when raion have NA replace with 0 since it means that there are no events
raion_weekly$count[is.na(raion_weekly$count)] <- 0

# attach geometries since some oblasts have empty geometry
raion_weekly <- left_join(raion_weekly %>% select(-geometry), raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
```

```{r}
# convert the 'week' column to character format for raion_weekly and oblast_weekly
raion_weekly$week <- as.character(raion_weekly$week)
oblast_weekly$week <- as.character(oblast_weekly$week)

# convert the 'week' column to Date format using lubridate for raion_weekly and oblast_weekly
raion_weekly$week <- ymd(raion_weekly$week)
oblast_weekly$week <- ymd(oblast_weekly$week)
```

#### Standardization at weekly level

```{r}
# min-max standardization
raion_weekly <-  raion_weekly %>%
  mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
```

```{r}
# min-max standardization
oblast_weekly <-  oblast_weekly %>%
  mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
```

```{r eval= FALSE}
# z-score standardization and then min-max to fit the 0-100 scale

# z-score standardization
raion_weekly <- raion_weekly %>%
  mutate(z_score = (count - mean(count, na.rm = TRUE)) / sd(count, na.rm = TRUE))

# min-max normalization to scale z-scores between 0 and 100
raion_weekly <- raion_weekly %>%
  mutate(intensity = ((z_score - min(z_score, na.rm = TRUE)) / 
                      (max(z_score, na.rm = TRUE) - min(z_score, na.rm = TRUE))) * 100)
```

#### Aggregation at Raion Level

```{r}
# aggregate war-fire events at raion level not weekly level
wf_raions_summarized <- wf_raions %>% st_drop_geometry() %>%
  filter(!is.na(fire)) %>% # exclude events where 'fire' is NA
  group_by(raion_name) %>%
  summarise(count = n(), .groups = 'drop')

# when raion have NA replace with 0 since it means that there are no events
wf_raions_summarized$count[is.na(wf_raions_summarized$count)] <- 0
```

```{r}
# min-max standardization
wf_raions_summarized <-  wf_raions_summarized %>%
  mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
```

#### Export datasets

```{r eval= FALSE}
write.csv(raion_weekly %>% select(-geometry), "output/data/war_fire_raion.csv", row.names = FALSE) # export war fire events at raion level
```

```{r eval= FALSE}
write.csv(oblast_weekly %>% select(-geometry), "output/data/war_fire_oblast.csv", row.names = FALSE) # export war fire events at oblast level
```

## Visualizations

```{r eval= FALSE}
# Create the map for raion_month
raion_map <- tm_shape(raion_month) +
  tm_basemap(server = "OpenStreetMap") +
  tm_polygons("count", palette = "Blues", title = paste0("Raion-level Monthly Count - ", '0', month))

# Create the map for oblast_month
oblast_map <- tm_shape(oblast_month) +
  tm_basemap(server = "OpenStreetMap") +
  tm_polygons("count", palette = "Reds", title = paste0("Oblast-level Monthly Count - ", '0', month))

# Combine both maps
combined_map <- oblast_map + raion_map

# set tmap to interactive mode
tmap_mode("view")
tmap::tmap_leaflet(combined_map)
```

#### Map Animation at Raions and Oblast level for each week

```{r eval= FALSE}
# make sure week is a date
raion_weekly$week <- as.Date(raion_weekly$week)

# check no NA in week
raion_weekly_animation <- raion_weekly %>% filter(!is.na(week))

# set dataset as sf
raion_weekly_animation <- st_as_sf(raion_weekly_animation, sf_column_name = "geometry", crs= 4326)

# arrange from the latest to the earliest
raion_weekly_animation <- raion_weekly_animation %>% arrange(week)

# create breaks
breaks <- classInt::classIntervals(raion_weekly_animation$intensity, n = 5, style = "jenks")$brks

# Function to create individual maps
create_map <- function(time) {
  tm_shape(raion_weekly_animation %>%
             filter(week == time)) +
    tm_basemap("OpenStreetMap") +
    tm_polygons("intensity", palette = "Blues", title = "Intensity (0-100)", 
                breaks = breaks) +
    tm_layout(title = paste("Week:", time))
}

# List of time points
time_points <- unique(raion_weekly_animation$week)

# Create the animation
tmap_animation(
  tm = lapply(time_points, create_map),
  filename = "output/figures/old_raion_intensity.gif",
  width = 800,
  height = 600,
  delay = 100
)
```

### Interactive Map at Raion Level

```{r eval= FALSE}
time = '2022-07-11'
tm_shape(raion_weekly_animation %>%
             filter(week == time)) + # select specific week by looking at time_points
    tm_polygons("intensity", palette = "Blues", title = "Intensity (0-100)", 
                breaks = breaks) +
    tm_layout(title = paste("Week:", time))

tmap_mode("view")
```

#### War-fire events across the number of weeks 

```{r}
# plot war-fire events across the number of weeks
ggplot(raion_weekly, aes(x = week_number, y = count)) +
  geom_line(color = "blue") +
  geom_point(color = "blue") +
  labs(title = "War Fire Events Across Weeks", x = "Week Number", y = "War Fire Events") +
  theme_minimal()
```

## Internal Displacement and War-Fire Events

### IDPs data

```{r}
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions_2.csv')
```

```{r}
# rename raion variable
idp_raion <- idp_raion %>% rename(raion_name = ADM2_EN,
                                  oblast_name = ADM1_EN,
                                  week_number = week_adjusted)
```

```{r}
idp_raion_geom <- idp_raion %>% distinct(raion_name, .keep_all = TRUE) %>% left_join(raion_weekly %>% select(raion_name, geometry),by = 'raion_name')

idp_raion_geom <- st_as_sf(idp_raion_geom, sf_column_name = "geometry")
```

```{r}
# summarized dataset by raion
summarized_dataset2 <- idp_raion %>%
  group_by(raion_name) %>%
  summarize(
    net_refugee_outflow = mean(net_refugee_outflow, na.rm = TRUE),
    net_pop_change = mean(net_pop_change, na.rm = TRUE),
    mean_proportional_net_change = mean(proportional_net_change, na.rm = TRUE),
   # total_baseline_raion_population = total_baseline_raion_population
  )

# add baseline population
summarized_dataset2 <- summarized_dataset2 %>% left_join(idp_raion %>% 
                                                           select(raion_name, total_baseline_raion_population) %>%
                                                           distinct(raion_name, total_baseline_raion_population), 
    by = 'raion_name') %>%
  filter(!is.na(net_pop_change)) # remove areas where population change is NA
```

```{r}
# summarized dataset by week and raion
summarized_dataset2 <- idp_raion %>%
  group_by(raion_name, week_number) %>%
  summarize(
    net_refugee_outflow = mean(net_refugee_outflow, na.rm = TRUE),
    net_pop_change = mean(net_pop_change, na.rm = TRUE),
    mean_proportional_net_change = mean(proportional_net_change, na.rm = TRUE),
    #total_baseline_raion_population = total_baseline_raion_population
  ) %>%
  filter(!is.na(net_pop_change)) # remove areas where population change is NA
```

### Relationship between IDPs data and war-fire intensity

"net_refugee_outflow" is the net number of people leaving Ukraine on a particular day after the invasion\
\
"net_pop_change" is the rolling count of people moving in or out a given raion day by day

"proportional_net_change" is the the ratio between net change and baseline population

### Broader time range calculation

```{r}
# merge the datasets by raion_name and week_number
merged_data <- wf_raions_summarized %>%
  inner_join(summarized_dataset, by = c("raion_name")) %>% 
  select(raion_name, count, intensity, net_refugee_outflow, net_pop_change, mean_proportional_net_change) %>%
  rename(wf_count = count,
         wf_intensity = intensity)
```

### Weekly level calculation

```{r}
# merge the datasets by raion_name and week_number
merged_data2 <- raion_weekly %>%
  inner_join(summarized_dataset2, by = c("raion_name", "week_number")) %>% 
  select(raion_name, week, week_number, count, intensity, net_refugee_outflow, net_pop_change, mean_proportional_net_change) %>%
  rename(wf_count = count,
         wf_intensity = intensity)
```

### Outputs

```{r}
# 1) calculate the correlation matrix

# select relevant columns for correlation
cor_data <- merged_data %>%
  select(net_refugee_outflow, net_pop_change, mean_proportional_net_change, wf_intensity)

# Calculate the correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")

# Print the correlation matrix
print(cor_matrix)

# Visualize the correlation matrix using ggcorrplot
ggcorrplot(cor_matrix, 
           method = "circle", 
           type = "lower", 
           lab = TRUE, 
           lab_size = 3, 
           title = "Correlation Matrix", 
           ggtheme = theme_minimal())
```

```{r}
# calculate the correlation between wf_intensity and net_pop_change for each raion

# function to calculate correlation for each raion
calculate_correlation <- function(data) {
  cor(data$wf_intensity, data$net_pop_change, use = "complete.obs")
}

wf_idp_raion2 <- merged_data2 %>%
  group_by(raion_name) %>%
  summarize(mean_net_pop_change = mean(net_pop_change, na.rm = TRUE),
            mean_wf_count = mean(wf_count, na.rm = TRUE),
            correlation = calculate_correlation(cur_data_all()))

#wf_idp_raion2$correlation <- cor(wf_idp_raion2$wf_count, wf_idp_raion2$net_pop_change, use = "complete.obs")

# Apply Min-Max normalization to sum_wf_count directly within the mutate function
wf_idp_raion2 <- wf_idp_raion2 %>%
  mutate(wf_intensity = (mean_wf_count - min(mean_wf_count, na.rm = TRUE)) / 
                                   (max(mean_wf_count, na.rm = TRUE) - min(mean_wf_count, na.rm = TRUE))) %>%
  rename(
    net_pop_change = mean_net_pop_change,
    wf_count = mean_wf_count
  )
```

```{r}
wf_idp_raion <- merged_data
```

```{r}
# 3) produce a bivariate map displaying intensity and net_pop_change
# create a new variable for bivariate mapping
map_data <- wf_idp_raion
bivariate_data <- bi_class(map_data, x = net_pop_change, y = wf_count, style = "equal", dim = 3)

map_data <- map_data %>%
  mutate(bivariate = bivariate_data$bi_class)

# add geometry
map_data <- map_data %>%
  left_join(raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))

# set up spatial dataset
map_data <- st_as_sf(map_data, sf_column_name = 'geometry', crs = 4326)
  
# create map
map <- ggplot() +
  geom_sf(data = map_data, mapping = aes(fill = bivariate), color = "white", size = 0.1, show.legend = FALSE) +
  bi_scale_fill(pal = "GrPink", dim = 3) +
  labs(
    title = "War-fire events and Displacement",
  ) +
  theme(
    plot.title = element_text(size = 5)  # Make title smaller
  ) +
  bi_theme()

legend <- bi_legend(pal = "GrPink",
                    dim = 3,
                    xlab = "War-fire events",
                    ylab = "Net Population Change",
                    size = 7)

# Combine map with legend, making the legend larger
finalPlot <- ggdraw() +
  draw_plot(map, 0, 0, 1, 1) +
  draw_plot(legend, 0.05, 0.05, 0.3, 0.3)  # Adjusted position and size for larger legend

# Display the final plot
finalPlot

# save it
ggsave(filename = "output/bivariate_map.png", plot = finalPlot, dpi = 300)
```

```{r}
# create a new variable for bivariate mapping
map_data2 <- map_data2 %>%
  mutate(bivariate2 = cut(net_pop_change, breaks = 5, labels = FALSE) +
           cut(wf_intensity, breaks = 5, labels = FALSE))

# plot the bivariate map
tmap_mode("view")
tm_shape(map_data2) +
  tm_polygons("bivariate2", title = "Bivariate Map 2")
```

```{r}
# add geometry
map_data2 <- wf_idp_raion2 %>%
  left_join(raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))

# convert raion_weekly to spatial data
map_data2 <- st_as_sf(map_data2, sf_column_name = 'geometry', crs = 4326)

# plot the map with interaction
tmap_mode("view")
map <- tm_shape(map_data2) +
  tm_polygons("correlation", title = "War-Fire Events and Net Population Change Correlation")

# visualize map
map

# save the map to the output folder
tmap_save(map, filename = "output/map_war_fire_idp_net_change_correlation.png", dpi = 300)
```

```{r}
# 4) produce a scatterplot between intensity and net_pop_change

# plot the scatterplot
scatter_plot <- ggplot(wf_idp_raion, aes(x = wf_intensity, y = net_pop_change, text = raion_name)) +
  geom_point() +
  labs(title = "Scatterplot between War-Fire Intensity and Net Population Change",
       x = "War Fire Intensity",
       y = "Net Population Change")

# make the scatterplot interactive
interactive_scatter <- ggplotly(scatter_plot)

# display the interactive scatterplot
interactive_scatter
```

```{r}
# create the static scatterplot
scatter_plot <- ggplot(wf_idp_raion, aes(x = wf_intensity, y = net_pop_change)) +
  geom_point() +
  labs(title = "Scatterplot between War-Fire Intensity and Net Population Change",
       x = "War Fire Intensity",
       y = "Net Population Change")

scatter_plot

# save it
ggsave(filename = "output/war_id_population_change_plot.png", plot = scatter_plot, dpi = 300)
```

```{r}
# Create the scatterplot
scatter_plot <- ggplot(wf_idp_raion, aes(x = wf_intensity, y = net_pop_change, text = raion_name)) +
  geom_point() +
  labs(title = "Scatterplot between War-Fire Intensity and Net Population Change",
       x = "Intensity",
       y = "Net Population Change")

# Convert the scatterplot to an interactive plotly object
interactive_scatter <- ggplotly(scatter_plot, tooltip = "text")

# Create the map with only geometries
map_plot <- ggplot(map_data) +
  geom_sf(color = "black", fill = NA) +
  labs(title = "Map of Raions") +
  theme_minimal()

# Convert the map to an interactive plotly object
interactive_map <- ggplotly(map_plot)

# Highlighting the raion in the map when interacting with the scatterplot
highlight_map <- function(raion_selected) {
  highlighted_map <- ggplot(map_data) +
    geom_sf(color = "black", fill = NA) +
    geom_sf(data = map_data %>% filter(raion_name == raion_selected), fill = "red", alpha = 0.5) +
    labs(title = paste("Map of Raions - Highlighted:", raion_selected)) +
    theme_minimal()
  ggplotly(highlighted_map)
}

ui <- fluidPage(
  plotlyOutput("scatter_plot"),
  plotlyOutput("map_plot")
)

server <- function(input, output, session) {
  output$scatter_plot <- renderPlotly({
    interactive_scatter %>%
      onRender("
        function(el, x) {
          el.on('plotly_hover', function(event_data) {
            Shiny.setInputValue('hover_event', event_data.points[0].text);
          });
          el.on('plotly_click', function(event_data) {
            Shiny.setInputValue('click_event', event_data.points[0].text);
          });
        }
      ")
  })
  
  output$map_plot <- renderPlotly({
    interactive_map
  })
  
  observeEvent(input$hover_event, {
    output$map_plot <- renderPlotly({
      highlight_map(input$hover_event)
    })
  })
  
  observeEvent(input$click_event, {
    output$map_plot <- renderPlotly({
      highlight_map(input$click_event)
    })
  })
}

shinyApp(ui, server)
```

### Francisco Map + Chart Viz

Chart

```{r}
# compute war-fire intesity quantiles
wf_idp_raion <- wf_idp_raion %>% 
  mutate(
    intensity_quantile = wf_intensity %>%
      Hmisc::cut2(g=5), # Note, cut2 comes from the Hmisc package
  )

# add labels
wf_idp_raion$intensity_quantile <- ordered(wf_idp_raion$intensity_quantile,
                                              labels = c("Low", "Mid low", "Medium", "Mid high", "High")
)

# get summary
wf_idp_raion$intensity_quantile %>% 
  summary()
```

```{r}
wf_idp_raion %>% 
  ggplot(aes(x = net_pop_change, y = intensity_quantile)) + 
  # Add vertical line at x = 0
  geom_vline(aes(xintercept = 0), size = 1, color = "#B8B8B8", alpha = 0.5) +
  # Add vertical line at x = 0
  geom_hline(aes(yintercept = intensity_quantile), size = 0.2, color = "#B8B8B8", alpha = 0.6) +
  # Add net migration counts
  geom_point(aes(color = net_pop_change, size = abs(net_pop_change / 1e3)), shape = 21, alpha = 1) + 
  scale_colour_distiller(palette = "RdBu", direction = -1) +
  guides(colour = "none") + # Remove colour legend
  scale_size_continuous(name = "Net migration \ncount (thousand)") +
  # change scale on x-axis
  scale_x_continuous(breaks = c(-600000, -300000, -100000, 0, 100000), 
                     labels = c("-600k", "-300k", "-100k", "0", "100k")) +
  geom_point(aes(x = net_pop_change), shape = 124, color = "cyan", size = 3) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.y = element_text(size = 8),
    axis.text.x = element_text(size = 8),
    axis.title = element_text(size = 10),
    plot.margin = margin(t = 2.5, r = 2, b = 2.5, l = 2, unit = "cm")
  ) +
  labs(
    x = "Net migration rate",
    y = "War-Fire Events quantile"
  ) 

#  annotate("text", x = -1.5, y = 5.4, label = "Net loss", size = 3, colour = "darkblue", fontface = "bold") +
#  annotate("text", x = 1.2, y = 5.4, label = "Net gain", size = 3, colour = "darkred", fontface = "bold")
```

```{r}
net_density_plot <- last_plot()
```

Map

```{r}
# Join wf_idp_raion with raions to get the geometry
wf_idp_raion_geom <- wf_idp_raion %>%
  left_join(raions, by = c("raion_name" = "ADM2_EN"))

# Create plot
ggplot(data = wf_idp_raion_geom) +
  geom_sf(aes(geometry = geometry, fill = intensity_quantile), col = "white", size = 0.1) +
  coord_sf() +
  scale_fill_brewer(palette = "PuRd", direction = 1) +
  theme_void() +
  guides(fill = guide_legend(title = "War-Fire Intensity")) +
  geom_sf(data = raions, aes(geometry = geometry), col = "black", size = 0.5, fill = "transparent") # add all raions geometries
```

```{r}
# save the map plot
ggsave(filename = "output/war_fire_intensity_map.png", plot = map_plot, dpi = 300)
```

```{r}
war_intensity_density_map <- last_plot()
```

## Generate outputs for only given weeks

### Code Dump

```{r eval= FALSE}
# remove duplicate - !this is not required with with st_join centroids
idp_raion_origin_unique <- idp_raion_origin %>% distinct(ADM2_EN, ADM2_EN, month, day, .keep_all = TRUE)

idp_raion_destination_unique <- idp_raion_destination %>% distinct(ADM2_EN, ADM2_EN, month, day, .keep_all = TRUE)

# set up dataset as sf
idp_raion_origin <- st_as_sf(idp_raion_origin_unique, sf_column_name = "geometry", crs= 4326)

idp_raion_destination <- st_as_sf(idp_raion_destination_unique, sf_column_name = "geometry", crs= 4326)
```

```{r eval= FALSE}
# spatial joint idp raion at origin with new raion shapefiles
idp_raion_new_origin <- st_join(raions %>% select(1,5, geometry), idp_raion_origin, 
                         #largest = TRUE
)

idp_raion_new_destination <- st_join(raions %>% select(1,5, geometry), idp_raion_destination)
#                         #largest = TRUE)
```

```{r eval= FALSE}
# create a unique dataset with ADM2_EN and ADM2_EN from idp_raion_new_destination
unique_pairs <- idp_raion_new_destination %>%
  st_drop_geometry() %>%
  select(ADM2_EN, ADM2_EN) %>%
  distinct() %>%
  na.omit()

# rename ADM2_EN to raion_destination_name
unique_pairs <- unique_pairs %>%
  rename(raion_name_destination = ADM2_EN)
```

```{r eval= FALSE}
# match name of the old raion with the new raion for the destination
idp_raion_new <- idp_raion_new_origin %>% left_join(unique_pairs, by = "ADM2_EN")
```

```{r eval= FALSE}
summarized_values <- idp_raion_new %>% st_drop_geometry() %>%
  group_by(raion_name_origin, raion_name_destination, month, day) %>%
  summarise(
    total_baseline_raion_population = sum(total_baseline_raion_population, na.rm = TRUE),
    total_count = sum(total_count, na.rm = TRUE),
    net_pop_change = sum(net_pop_change, na.rm = TRUE)
  )
```
