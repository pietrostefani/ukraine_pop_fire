library(ggspatial)
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(tmap)
library(tmaptools)
library(ggspatial)
# read the csv file
war_fires <- read.csv("data/war_fire/ukraine_war_fires.csv")
head(war_fires)
# convert date column to date type
war_fires$date <- ymd(war_fires$date)
# get the earliest date of the dataset
print(min(war_fires$date))
# define start and end dates
start_date <- ymd("2022-02-24")
end_date <- ymd("2022-08-31")
# filter activities within the date range
war_fires_filtered <- war_fires %>%
filter(date >= start_date & date <= end_date)
# display the first few rows of the filtered data
head(war_fires_filtered)
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week
)
# read shapefiles
oblasts <- st_read("data/shapefiles/oblasts/oblasts.shp") # skip first row
raions <- st_read("data/shapefiles/raions/raions.shp") # skip first row
#oblasts <- st_read("data/gadm41_UKR_shp/gadm41_UKR_1.shp")[-1,] # skip first row
#raions <- st_read("data/gadm41_UKR_shp/gadm41_UKR_2.shp")[-1,] # skip first row
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
View(oblasts)
View(weeks)
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week,
week_num = weeks$week_number
)
View(all_oblast_weeks)
# read shapefiles
oblasts <- st_read("data/shapefiles/oblasts/oblasts.shp")
raions <- st_read("data/shapefiles/raions/raions.shp")
#oblasts <- st_read("data/gadm41_UKR_shp/gadm41_UKR_1.shp")[-1,] # skip first row
#raions <- st_read("data/gadm41_UKR_shp/gadm41_UKR_2.shp")[-1,] # skip first row
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week,
week_num = weeks$week_number
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
View(weeks)
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- data.frame(expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week
))
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_ENG), #ADM1_EN for correct raions
week = weeks$week
)
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_EN), #ADM1_EN for correct raions
week = weeks$week
)
# raion
all_raion_weeks <- expand.grid(
raion_name = unique(raions$ADM2_EN), #ADM2_EN for correct raions
week = weeks$week
)
# get the week number
all_raion_weeks <- merge(all_raion_weeks, weeks %>% select(week, week_number), by = "week")
View(all_raion_weeks)
# create spatial dataset from war_fires_filtered
war_fires_filtered_geom <- st_as_sf(war_fires_filtered, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) # set crs to WGS84
# ensure geometry is valid
war_fires_filtered_geom = sf::st_make_valid(war_fires_filtered_geom)
war_fires_filtered_geom <- st_transform(war_fires_filtered_geom, crs = 4326)  # Use appropriate CRS
# rename war_fires_filtered_geom
wf <- war_fires_filtered_geom
# ensure both shapefiles and events are in the same CRS
oblasts <- st_transform(oblasts, st_crs(wf))
raions <- st_transform(raions, st_crs(oblasts))
# spatial join to add oblast and raion info to the events
wf_oblasts <- st_join(oblasts, wf, left = TRUE) # deselect date with correct raions shp
wf_raions <- st_join(raions, wf, left = TRUE) # deselect date with correct raions shp
# rename area name variables
wf_oblasts <- wf_oblasts %>% rename(oblast_name = ADM1_ENG) #ADM1_ENG for correct raions
# rename war_fires_filtered_geom
wf <- war_fires_filtered_geom
# ensure both shapefiles and events are in the same CRS
oblasts <- st_transform(oblasts, st_crs(wf))
raions <- st_transform(raions, st_crs(oblasts))
# spatial join to add oblast and raion info to the events
wf_oblasts <- st_join(oblasts, wf, left = TRUE) # deselect date with correct raions shp
wf_raions <- st_join(raions, wf, left = TRUE) # deselect date with correct raions shp
# rename area name variables
wf_oblasts <- wf_oblasts %>% rename(oblast_name = ADM1_EN) #ADM2_EN for correct raions
wf_raions <- wf_raions %>% rename(raion_name = ADM2_EN) #ADM2_EN for correct raions
# aggregate by oblast and week
oblast_weekly <- wf_oblasts %>%
group_by(oblast_name, week) %>%
summarise(count = n(), .groups = 'drop')
# aggregate by raion and week
raion_weekly <- wf_raions %>%
group_by(raion_name, week) %>%
summarise(count = n(), .groups = 'drop')
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c("oblast_name", "week"))
# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM2_EN, geometry), by = c("oblast_name" = "ADM2_EN"))
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions.csv')
View(idp_raion)
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_EN), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# raion
all_raion_weeks <- expand.grid(
raion_name = unique(raions$ADM2_EN), #ADM2_EN for correct raions
week = weeks$week
)
# get the week number
all_raion_weeks <- merge(all_raion_weeks, weeks %>% select(week, week_number), by = "week")
# create spatial dataset from war_fires_filtered
war_fires_filtered_geom <- st_as_sf(war_fires_filtered, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) # set crs to WGS84
# ensure geometry is valid
war_fires_filtered_geom = sf::st_make_valid(war_fires_filtered_geom)
war_fires_filtered_geom <- st_transform(war_fires_filtered_geom, crs = 4326)  # Use appropriate CRS
View(all_oblast_weeks)
View(oblast_weekly)
View(raions)
View(oblasts)
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c(oblast_name, week))
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c('oblast_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(oblast_name, geometry), by = c("oblast_name" = "ADM1_EN"))
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c('oblast_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM1_EN, geometry), by = c("oblast_name" = "ADM1_EN"))
# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c(raion_name, week))
View(raion_weekly)
View(raion_weekly)
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM1_EN, geometry), by = c("oblast_name" = "ADM1_EN"))
# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c(raion_name, week))
# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c('raion_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
raion_weekly$count[is.na(raion_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
raion_weekly <- left_join(raion_weekly %>% select(-geometry), raions %>% select(raion_name, geometry), by = c("raion_name" = "ADM2_EN"))
# attach geometries since some oblasts have empty geometry
raion_weekly <- left_join(raion_weekly %>% select(-geometry), raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# convert the 'week' column to character format for raion_weekly and oblast_weekly
raion_weekly$week <- as.character(raion_weekly$week)
oblast_weekly$week <- as.character(oblast_weekly$week)
# convert the 'week' column to Date format using lubridate for raion_weekly and oblast_weekly
raion_weekly$week <- ymd(raion_weekly$week)
oblast_weekly$week <- ymd(oblast_weekly$week)
# min-max standardization
raion_weekly <-  raion_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
write.csv(raion_weekly, "output/data/war_fire_raion.csv", row.names = FALSE)
# min-max standardization
oblast_weekly <-  oblast_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# min-max normalization to scale z-scores between 0 and 100
oblast_weekly <- oblast_weekly %>%
mutate(intensity = ((z_score - min(z_score, na.rm = TRUE)) /
(max(z_score, na.rm = TRUE) - min(z_score, na.rm = TRUE))) * 100)
# min-max standardization
oblast_weekly <-  oblast_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
write.csv(oblast_weekly, "output/data/war_fire_oblast.csv", row.names = FALSE)
typeof(raion_weekly)
raion_weekly <- data.frame(raion_weekly)
typeof(raion_weekly)
View(raion_weekly)
write.csv(raion_weekly %>% (-geometry), "output/data/war_fire_raion.csv", row.names = FALSE) # export war fire events at raion level
write.csv(raion_weekly %>% select(-geometry), "output/data/war_fire_raion.csv", row.names = FALSE) # export war fire events at raion level
write.csv(oblast_weekly %>% select(-geometry), "output/data/war_fire_oblast.csv", row.names = FALSE) # export war fire events at oblast level
write.csv(oblast_weekly %>% select(-geometry), "output/data/war_fire_oblast.csv", row.names = FALSE) # export war fire events at oblast level
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(tmap)
library(tmaptools)
library(ggspatial)
# read the csv file
war_fires <- read.csv("data/war_fire/ukraine_war_fires.csv")
head(war_fires)
# convert date column to date type
war_fires$date <- ymd(war_fires$date)
# get the earliest date of the dataset
print(min(war_fires$date))
# define start and end dates
start_date <- ymd("2022-02-24")
end_date <- ymd("2022-08-31")
# filter activities within the date range
war_fires_filtered <- war_fires %>%
filter(date >= start_date & date <= end_date)
# display the first few rows of the filtered data
head(war_fires_filtered)
# read shapefiles
oblasts <- st_read("data/shapefiles/oblasts/oblasts.shp")
raions <- st_read("data/shapefiles/raions/raions.shp")
#oblasts <- st_read("data/gadm41_UKR_shp/gadm41_UKR_1.shp")[-1,] # skip first row
#raions <- st_read("data/gadm41_UKR_shp/gadm41_UKR_2.shp")[-1,] # skip first row
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_EN), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# raion
all_raion_weeks <- expand.grid(
raion_name = unique(raions$ADM2_EN), #ADM2_EN for correct raions
week = weeks$week
)
# get the week number
all_raion_weeks <- merge(all_raion_weeks, weeks %>% select(week, week_number), by = "week")
# create spatial dataset from war_fires_filtered
war_fires_filtered_geom <- st_as_sf(war_fires_filtered, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) # set crs to WGS84
# ensure geometry is valid
war_fires_filtered_geom = sf::st_make_valid(war_fires_filtered_geom)
war_fires_filtered_geom <- st_transform(war_fires_filtered_geom, crs = 4326)  # Use appropriate CRS
# rename war_fires_filtered_geom
wf <- war_fires_filtered_geom
# ensure both shapefiles and events are in the same CRS
oblasts <- st_transform(oblasts, st_crs(wf))
raions <- st_transform(raions, st_crs(oblasts))
# spatial join to add oblast and raion info to the events
wf_oblasts <- st_join(oblasts, wf, left = TRUE) # deselect date with correct raions shp
wf_raions <- st_join(raions, wf, left = TRUE) # deselect date with correct raions shp
# rename area name variables
wf_oblasts <- wf_oblasts %>% rename(oblast_name = ADM1_EN) #ADM2_EN for correct raions
wf_raions <- wf_raions %>% rename(raion_name = ADM2_EN) #ADM2_EN for correct raions
# aggregate by oblast and week
oblast_weekly <- wf_oblasts %>%
group_by(oblast_name, week) %>%
summarise(count = n(), .groups = 'drop')
View(oblast_weekly)
# aggregate by raion and week
raion_weekly <- wf_raions %>%
group_by(raion_name, week) %>%
summarise(count = n(), .groups = 'drop')
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c('oblast_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM1_EN, geometry), by = c("oblast_name" = "ADM1_EN"))
# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c('raion_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
raion_weekly$count[is.na(raion_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
raion_weekly <- left_join(raion_weekly %>% select(-geometry), raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# convert the 'week' column to character format for raion_weekly and oblast_weekly
raion_weekly$week <- as.character(raion_weekly$week)
oblast_weekly$week <- as.character(oblast_weekly$week)
# convert the 'week' column to Date format using lubridate for raion_weekly and oblast_weekly
raion_weekly$week <- ymd(raion_weekly$week)
oblast_weekly$week <- ymd(oblast_weekly$week)
# min-max standardization
raion_weekly <-  raion_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# min-max standardization
oblast_weekly <-  oblast_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
View(oblast_weekly)
```{r}
write.csv(raion_weekly %>% select(-geometry), "output/data/war_fire_raion.csv", row.names = FALSE) # export war fire events at raion level
write.csv(oblast_weekly %>% select(-geometry), "output/data/war_fire_oblast.csv", row.names = FALSE) # export war fire events at oblast level
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions.csv')
View(idp_raion)
colnames(idp_raion)
View(raion_weekly)
View(raion_weekly)
# rename raion variable
idp_raion <- idp_raion %>% rename(raion_name = ADM2_EN)
# calculate the week by date
# rename raion variable
idp_raion <- idp_raion %>% rename(raion_name = ADM2_EN,
oblast_name = ADM1_EN)
# rename raion variable
idp_raion <- idp_raion %>% rename(raion_name = ADM2_EN,
oblast_name = ADM1_EN)
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions.csv')
# rename raion variable
idp_raion <- idp_raion %>% rename(raion_name = ADM2_EN,
oblast_name = ADM1_EN)
# calculate the week by date
library(corrr)
install.packages('corrr')
library(ggmap)
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(tmap)
library(tmaptools)
library(ggspatial)
library(corrr)
install.packages('corrr')
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(tmap)
library(tmaptools)
library(ggspatial)
library(corrr)
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(tmap)
library(tmaptools)
library(ggspatial)
library(plotly)
# read the csv file
war_fires <- read.csv("data/war_fire/ukraine_war_fires.csv")
head(war_fires)
# convert date column to date type
war_fires$date <- ymd(war_fires$date)
# get the earliest date of the dataset
print(min(war_fires$date))
# define start and end dates
start_date <- ymd("2022-02-24")
end_date <- ymd("2022-08-31")
# filter activities within the date range
war_fires_filtered <- war_fires %>%
filter(date >= start_date & date <= end_date)
# display the first few rows of the filtered data
head(war_fires_filtered)
# read shapefiles
oblasts <- st_read("data/shapefiles/oblasts/oblasts.shp")
raions <- st_read("data/shapefiles/raions/raions.shp")
#oblasts <- st_read("data/gadm41_UKR_shp/gadm41_UKR_1.shp")[-1,] # skip first row
#raions <- st_read("data/gadm41_UKR_shp/gadm41_UKR_2.shp")[-1,] # skip first row
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_EN), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# raion
all_raion_weeks <- expand.grid(
raion_name = unique(raions$ADM2_EN), #ADM2_EN for correct raions
week = weeks$week
)
# get the week number
all_raion_weeks <- merge(all_raion_weeks, weeks %>% select(week, week_number), by = "week")
# create spatial dataset from war_fires_filtered
war_fires_filtered_geom <- st_as_sf(war_fires_filtered, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) # set crs to WGS84
# ensure geometry is valid
war_fires_filtered_geom = sf::st_make_valid(war_fires_filtered_geom)
war_fires_filtered_geom <- st_transform(war_fires_filtered_geom, crs = 4326)  # Use appropriate CRS
# rename war_fires_filtered_geom
wf <- war_fires_filtered_geom
# ensure both shapefiles and events are in the same CRS
oblasts <- st_transform(oblasts, st_crs(wf))
raions <- st_transform(raions, st_crs(oblasts))
# spatial join to add oblast and raion info to the events
wf_oblasts <- st_join(oblasts, wf, left = TRUE) # deselect date with correct raions shp
wf_raions <- st_join(raions, wf, left = TRUE) # deselect date with correct raions shp
# rename area name variables
wf_oblasts <- wf_oblasts %>% rename(oblast_name = ADM1_EN) #ADM2_EN for correct raions
wf_raions <- wf_raions %>% rename(raion_name = ADM2_EN) #ADM2_EN for correct raions
# aggregate by oblast and week
oblast_weekly <- wf_oblasts %>%
group_by(oblast_name, week) %>%
summarise(count = n(), .groups = 'drop')
# aggregate by raion and week
raion_weekly <- wf_raions %>%
group_by(raion_name, week) %>%
summarise(count = n(), .groups = 'drop')
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c('oblast_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM1_EN, geometry), by = c("oblast_name" = "ADM1_EN"))
# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c('raion_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
raion_weekly$count[is.na(raion_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
raion_weekly <- left_join(raion_weekly %>% select(-geometry), raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# convert the 'week' column to character format for raion_weekly and oblast_weekly
raion_weekly$week <- as.character(raion_weekly$week)
oblast_weekly$week <- as.character(oblast_weekly$week)
# convert the 'week' column to Date format using lubridate for raion_weekly and oblast_weekly
raion_weekly$week <- ymd(raion_weekly$week)
oblast_weekly$week <- ymd(oblast_weekly$week)
# min-max standardization
raion_weekly <-  raion_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# min-max standardization
oblast_weekly <-  oblast_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions_2')
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions_2')
ls
