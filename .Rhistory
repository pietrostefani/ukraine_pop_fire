guides(colour = "none") + # Remove colour legend
scale_size_continuous(name = "Net migration \ncount (thousand)") +
# change scale on x-axis
scale_x_continuous(breaks = c(-600000, -300000, -100000, 0, 100000),
labels = c("-600k", "-300k", "-100k", "0", "100k")) +
geom_point(aes(x = net_pop_change), shape = 124, color = "cyan", size = 3) +
theme_minimal() +
theme(
legend.position = "bottom",
axis.text.y = element_text(size = 8),
axis.text.x = element_text(size = 8),
axis.title = element_text(size = 10),
plot.margin = margin(t = 2.5, r = 2, b = 2.5, l = 2, unit = "cm")
) +
labs(
x = "Net migration rate",
y = "War-Fire Events quantile"
)
#  annotate("text", x = -1.5, y = 5.4, label = "Net loss", size = 3, colour = "darkblue", fontface = "bold") +
#  annotate("text", x = 1.2, y = 5.4, label = "Net gain", size = 3, colour = "darkred", fontface = "bold")
net_density_plot <- last_plot()
# Join wf_idp_raion with raions to get the geometry
wf_idp_raion_geom <- wf_idp_raion %>%
left_join(raions, by = c("raion_name" = "ADM2_EN"))
# Create plot
ggplot(data = wf_idp_raion_geom) +
geom_sf(aes(geometry = geometry, fill = intensity_quantile), col = "white", size = 0.1) +
coord_sf() +
scale_fill_brewer(palette = "PuRd", direction = 1) +
theme_void() +
guides(fill = guide_legend(title = "Quantile")) +
geom_sf(data = raions, aes(geometry = geometry), col = "white", size = 0.5, fill = "transparent")
war_intensity_density_map <- last_plot()
# Join wf_idp_raion with raions to get the geometry
wf_idp_raion_geom <- wf_idp_raion %>%
left_join(raions, by = c("raion_name" = "ADM2_EN"))
# Create plot
ggplot(data = wf_idp_raion_geom) +
geom_sf(aes(geometry = geometry, fill = intensity_quantile), col = "white", size = 0.1) +
coord_sf() +
scale_fill_brewer(palette = "PuRd", direction = 1) +
theme_void() +
guides(fill = guide_legend(title = "War-Fire Intensity")) +
geom_sf(data = raions, aes(geometry = geometry), col = "white", size = 0.5, fill = "transparent")
# Join wf_idp_raion with raions to get the geometry
wf_idp_raion_geom <- wf_idp_raion %>%
left_join(raions, by = c("raion_name" = "ADM2_EN"))
# Create plot
ggplot(data = wf_idp_raion_geom) +
geom_sf(aes(geometry = geometry, fill = intensity_quantile), col = "white", size = 0.1) +
coord_sf() +
scale_fill_brewer(palette = "PuRd", direction = 1) +
theme_void() +
guides(fill = guide_legend(title = "War-Fire Intensity")) +
geom_sf(data = raions, aes(geometry = geometry), col = "black", size = 0.5, fill = "transparent")
# save the map plot
ggsave(filename = "output/war_fire_intensity_map.png", plot = map_plot, dpi = 300)
# load required package
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(ggmap)
library(ggcorrplot)
library(tmap)
library(tmaptools)
library(ggspatial)
library(plotly)
library(tibble)
library(biscale)
library(cowplot)
library(shiny)
library(htmlwidgets)
# read the csv file
war_fires <- read.csv("data/war_fire/ukraine_war_fires.csv")
head(war_fires)
# convert date column to date type
war_fires$date <- ymd(war_fires$date)
# get the earliest date of the dataset
print(min(war_fires$date))
# define start and end dates
start_date <- ymd("2022-02-24")
end_date <- ymd("2022-08-31")
# filter activities within the date range
war_fires_filtered <- war_fires %>%
filter(date >= start_date & date <= end_date)
# display the first few rows of the filtered data
head(war_fires_filtered)
# read shapefiles
oblasts <- st_read("data/shapefiles/oblasts/oblasts.shp")
raions <- st_read("data/shapefiles/raions/raions.shp")
#oblasts <- st_read("data/gadm41_UKR_shp/gadm41_UKR_1.shp")[-1,] # skip first row
#raions <- st_read("data/gadm41_UKR_shp/gadm41_UKR_2.shp")[-1,] # skip first row
# create weeks df
war_fires_filtered <- war_fires_filtered %>% mutate(week = floor_date(date, "week", week_start = 1))
weeks <- unique(war_fires_filtered$week)
weeks <- unique(war_fires_filtered$week) %>% sort()
weeks <- data.frame(week = weeks, week_number = seq_along(weeks))
# create dataset with all weeks and oblasts and raions name
all_oblast_weeks <- expand.grid(
oblast_name = unique(oblasts$ADM1_EN), #ADM1_EN for correct raions
week = weeks$week
)
# get the week number
all_oblast_weeks <- merge(all_oblast_weeks, weeks %>% select(week, week_number), by = "week")
# raion
all_raion_weeks <- expand.grid(
raion_name = unique(raions$ADM2_EN), #ADM2_EN for correct raions
week = weeks$week
)
# get the week number
all_raion_weeks <- merge(all_raion_weeks, weeks %>% select(week, week_number), by = "week")
# create spatial dataset from war_fires_filtered
war_fires_filtered_geom <- st_as_sf(war_fires_filtered, coords = c("LONGITUDE", "LATITUDE"), crs = 4326) # set crs to WGS84
# ensure geometry is valid
war_fires_filtered_geom = sf::st_make_valid(war_fires_filtered_geom)
war_fires_filtered_geom <- st_transform(war_fires_filtered_geom, crs = 4326)  # Use appropriate CRS
# rename war_fires_filtered_geom
wf <- war_fires_filtered_geom
# ensure both shapefiles and events are in the same CRS
oblasts <- st_transform(oblasts, st_crs(wf))
raions <- st_transform(raions, st_crs(oblasts))
# spatial join to add oblast and raion info to the events
wf_oblasts <- st_join(oblasts, wf, left = TRUE) # deselect date with correct raions shp
wf_raions <- st_join(raions, wf, left = TRUE) # deselect date with correct raions shp
# rename area name variables
wf_oblasts <- wf_oblasts %>% rename(oblast_name = ADM1_EN) #ADM2_EN for correct raions
wf_raions <- wf_raions %>% rename(raion_name = ADM2_EN) #ADM2_EN for correct raions
# aggregate by oblast and week
oblast_weekly <- wf_oblasts %>%
group_by(oblast_name, week) %>%
summarise(count = n(), .groups = 'drop')
# aggregate by raion and week
raion_weekly <- wf_raions %>%
filter(!is.na(fire)) %>% # exclude events where 'fire' is NA
group_by(raion_name, week) %>%
summarise(count = n(), .groups = 'drop')
# include all weeks and oblasts in the aggregated df per oblast per week
oblast_weekly <- left_join(all_oblast_weeks, oblast_weekly, by = c('oblast_name', 'week'))
# when oblasts have NA replace with 0 since it means that there are no events
oblast_weekly$count[is.na(oblast_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
oblast_weekly <- left_join(oblast_weekly %>% select(-geometry), oblasts %>% select(ADM1_EN, geometry), by = c("oblast_name" = "ADM1_EN"))
# include all weeks and raions in the aggregated df per raion per week
raion_weekly <- left_join(all_raion_weeks, raion_weekly, by = c('raion_name', 'week'))
# when raion have NA replace with 0 since it means that there are no events
raion_weekly$count[is.na(raion_weekly$count)] <- 0
# attach geometries since some oblasts have empty geometry
raion_weekly <- left_join(raion_weekly %>% select(-geometry), raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# convert the 'week' column to character format for raion_weekly and oblast_weekly
raion_weekly$week <- as.character(raion_weekly$week)
oblast_weekly$week <- as.character(oblast_weekly$week)
# convert the 'week' column to Date format using lubridate for raion_weekly and oblast_weekly
raion_weekly$week <- ymd(raion_weekly$week)
oblast_weekly$week <- ymd(oblast_weekly$week)
# min-max standardization
raion_weekly <-  raion_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# min-max standardization
oblast_weekly <-  oblast_weekly %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# aggregate war-fire events at raion level not weekly level
wf_raions_summarized <- wf_raions %>% st_drop_geometry() %>%
filter(!is.na(fire)) %>% # exclude events where 'fire' is NA
group_by(raion_name) %>%
summarise(count = n(), .groups = 'drop')
# when raion have NA replace with 0 since it means that there are no events
wf_raions_summarized$count[is.na(wf_raions_summarized$count)] <- 0
# min-max standardization
wf_raions_summarized <-  wf_raions_summarized %>%
mutate(intensity = (count - min(count, na.rm = TRUE)) / (max(count, na.rm = TRUE) - min(count, na.rm = TRUE)) * 100)
# load the internal displacement data grouped at raion level (new boundaries)
idp_raion <- read.csv('data/displacement_data/updated_raions_2.csv')
# rename raion variable
idp_raion <- idp_raion %>% rename(raion_name = ADM2_EN,
oblast_name = ADM1_EN,
week_number = week_adjusted)
idp_raion_geom <- idp_raion %>% distinct(raion_name, .keep_all = TRUE) %>% left_join(raion_weekly %>% select(raion_name, geometry),by = 'raion_name')
idp_raion_geom <- st_as_sf(idp_raion_geom, sf_column_name = "geometry")
# summarized dataset by raion
summarized_dataset <- idp_raion %>%
group_by(raion_name) %>%
summarize(
net_refugee_outflow = mean(net_refugee_outflow, na.rm = TRUE),
net_pop_change = mean(net_pop_change, na.rm = TRUE),
mean_proportional_net_change = mean(proportional_net_change, na.rm = TRUE),
# total_baseline_raion_population = total_baseline_raion_population
)
# add baseline population
summarized_dataset2 <- summarized_dataset2 %>% left_join(idp_raion %>%
select(raion_name, total_baseline_raion_population) %>%
distinct(raion_name, total_baseline_raion_population),
by = 'raion_name') %>%
filter(!is.na(net_pop_change))
# summarized dataset by raion
summarized_dataset2 <- idp_raion %>%
group_by(raion_name) %>%
summarize(
net_refugee_outflow = mean(net_refugee_outflow, na.rm = TRUE),
net_pop_change = mean(net_pop_change, na.rm = TRUE),
mean_proportional_net_change = mean(proportional_net_change, na.rm = TRUE),
# total_baseline_raion_population = total_baseline_raion_population
)
# add baseline population
summarized_dataset2 <- summarized_dataset2 %>% left_join(idp_raion %>%
select(raion_name, total_baseline_raion_population) %>%
distinct(raion_name, total_baseline_raion_population),
by = 'raion_name') %>%
filter(!is.na(net_pop_change))
# summarized dataset by week and raion
summarized_dataset2 <- idp_raion %>%
group_by(raion_name, week_number) %>%
summarize(
net_refugee_outflow = mean(net_refugee_outflow, na.rm = TRUE),
net_pop_change = mean(net_pop_change, na.rm = TRUE),
mean_proportional_net_change = mean(proportional_net_change, na.rm = TRUE),
#total_baseline_raion_population = total_baseline_raion_population
) %>%
filter(!is.na(net_pop_change))
# merge the datasets by raion_name and week_number
merged_data <- wf_raions_summarized %>%
inner_join(summarized_dataset, by = c("raion_name")) %>%
select(raion_name, count, intensity, net_refugee_outflow, net_pop_change, mean_proportional_net_change) %>%
rename(wf_count = count,
wf_intensity = intensity)
# merge the datasets by raion_name and week_number
merged_data2 <- raion_weekly %>%
inner_join(summarized_dataset2, by = c("raion_name", "week_number")) %>%
select(raion_name, week, week_number, count, intensity, net_refugee_outflow, net_pop_change, mean_proportional_net_change) %>%
rename(wf_count = count,
wf_intensity = intensity)
# 1) calculate the correlation matrix
# select relevant columns for correlation
cor_data <- merged_data %>%
select(net_refugee_outflow, net_pop_change, mean_proportional_net_change, wf_intensity)
# Calculate the correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")
# Print the correlation matrix
print(cor_matrix)
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(cor_matrix,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
title = "Correlation Matrix",
ggtheme = theme_minimal())
# calculate the correlation between wf_intensity and net_pop_change for each raion
# function to calculate correlation for each raion
calculate_correlation <- function(data) {
cor(data$wf_intensity, data$net_pop_change, use = "complete.obs")
}
wf_idp_raion2 <- merged_data2 %>%
group_by(raion_name) %>%
summarize(mean_net_pop_change = mean(net_pop_change, na.rm = TRUE),
mean_wf_count = mean(wf_count, na.rm = TRUE),
correlation = calculate_correlation(cur_data_all()))
#wf_idp_raion2$correlation <- cor(wf_idp_raion2$wf_count, wf_idp_raion2$net_pop_change, use = "complete.obs")
# Apply Min-Max normalization to sum_wf_count directly within the mutate function
wf_idp_raion2 <- wf_idp_raion2 %>%
mutate(wf_intensity = (mean_wf_count - min(mean_wf_count, na.rm = TRUE)) /
(max(mean_wf_count, na.rm = TRUE) - min(mean_wf_count, na.rm = TRUE))) %>%
rename(
net_pop_change = mean_net_pop_change,
wf_count = mean_wf_count
)
wf_idp_raion <- merged_data
wf_idp_raion$correlation <- cor(wf_idp_raion$net_pop_change, wf_idp_raion$wf_count, use = "complete.obs")
cat("The correlation at raion level combining all weeks movements and counts is:", cor(wf_idp_raion$net_pop_change, wf_idp_raion$wf_count, use = "complete.obs"), "\n")
# 3) produce a bivariate map displaying intensity and net_pop_change
# create a new variable for bivariate mapping
map_data <- wf_idp_raion
bivariate_data <- bi_class(map_data, x = net_pop_change, y = wf_count, style = "equal", dim = 3)
map_data <- map_data %>%
mutate(bivariate = bivariate_data$bi_class)
# add geometry
map_data <- map_data %>%
left_join(raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# create map
map <- ggplot() +
geom_sf(data = map_data, mapping = aes(fill = bivariate), color = "white", size = 0.1, show.legend = FALSE) +
bi_scale_fill(pal = "GrPink", dim = 3) +
labs(
title = "War-fire events and Displacement",
) +
theme(
plot.title = element_text(size = 5)  # Make title smaller
) +
bi_theme()
legend <- bi_legend(pal = "GrPink",
dim = 3,
xlab = "War-fire events",
ylab = "Net Population Change",
size = 7)
# Combine map with legend, making the legend larger
finalPlot <- ggdraw() +
draw_plot(map, 0, 0, 1, 1) +
draw_plot(legend, 0.05, 0.05, 0.3, 0.3)  # Adjusted position and size for larger legend
map
# 3) produce a bivariate map displaying intensity and net_pop_change
# create a new variable for bivariate mapping
map_data <- wf_idp_raion
bivariate_data <- bi_class(map_data, x = net_pop_change, y = wf_count, style = "equal", dim = 3)
map_data <- map_data %>%
mutate(bivariate = bivariate_data$bi_class)
# add geometry
map_data <- map_data %>%
left_join(raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# set up spatial dataset
map_data <- st_as_sf(map_data, sf_column_name = 'geometry', crs = 4326)
# create map
map <- ggplot() +
geom_sf(data = map_data, mapping = aes(fill = bivariate), color = "white", size = 0.1, show.legend = FALSE) +
bi_scale_fill(pal = "GrPink", dim = 3) +
labs(
title = "War-fire events and Displacement",
) +
theme(
plot.title = element_text(size = 5)  # Make title smaller
) +
bi_theme()
legend <- bi_legend(pal = "GrPink",
dim = 3,
xlab = "War-fire events",
ylab = "Net Population Change",
size = 7)
# Combine map with legend, making the legend larger
finalPlot <- ggdraw() +
draw_plot(map, 0, 0, 1, 1) +
draw_plot(legend, 0.05, 0.05, 0.3, 0.3)  # Adjusted position and size for larger legend
# Display the final plot
finalPlot
# 3) produce a bivariate map displaying intensity and net_pop_change
# create a new variable for bivariate mapping
map_data <- wf_idp_raion
bivariate_data <- bi_class(map_data, x = net_pop_change, y = wf_count, style = "equal", dim = 3)
map_data <- map_data %>%
mutate(bivariate = bivariate_data$bi_class)
# add geometry
map_data <- map_data %>%
left_join(raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# set up spatial dataset
map_data <- st_as_sf(map_data, sf_column_name = 'geometry', crs = 4326)
# create map
map <- ggplot() +
geom_sf(data = map_data, mapping = aes(fill = bivariate), color = "white", size = 0.1, show.legend = FALSE) +
bi_scale_fill(pal = "GrPink", dim = 3) +
labs(
title = "War-fire events and Displacement",
) +
theme(
plot.title = element_text(size = 5)  # Make title smaller
) +
bi_theme()
legend <- bi_legend(pal = "GrPink",
dim = 3,
xlab = "War-fire events",
ylab = "Net Population Change",
size = 7)
# Combine map with legend, making the legend larger
finalPlot <- ggdraw() +
draw_plot(map, 0, 0, 1, 1) +
draw_plot(legend, 0.05, 0.05, 0.3, 0.3)  # Adjusted position and size for larger legend
# Display the final plot
finalPlot
# save it
ggsave(filename = "output/bivariate_map.png", plot = finalPlot, dpi = 300)
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week_number, y = intensity)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Intensity vs Week Number", x = "Week Number", y = "Intensity") +
theme_minimal()
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week_number, y = counts)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Intensity vs Week Number", x = "Week Number", y = "Intensity") +
theme_minimal()
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week_number, y = count)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Intensity vs Week Number", x = "Week Number", y = "Intensity") +
theme_minimal()
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week_number, y = count)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Intensity vs Week Number", x = "Week Number", y = "War Fire Events") +
theme_minimal()
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week_number, y = count)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "War Fire Events Across Weeks", x = "Week Number", y = "War Fire Events") +
theme_minimal()
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week, y = count)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "War Fire Events Across Weeks", x = "Week Number", y = "War Fire Events") +
theme_minimal()
# Plotting the chart using ggplot2
ggplot(raion_weekly, aes(x = week_number, y = count)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "War Fire Events Across Weeks", x = "Week Number", y = "War Fire Events") +
theme_minimal()
# plot war-fire events across the number of weeks
ggplot(raion_weekly, aes(x = week_number, y = count)) +
geom_line(color = "blue") +
#geom_point(color = "blue") +
labs(title = "War Fire Events Across Weeks", x = "Week Number", y = "War Fire Events") +
theme_minimal()
View(wf_raions)
# plot war-fire events across the number of weeks
ggplot(raion_weekly, aes(x = week_number, y = count)) +
geom_line(color = "blue") +
#geom_point(color = "blue") +
labs(title = "War Fire Events Across Weeks", x = "Week Number", y = "War Fire Events") +
theme_minimal()
View(merged_data)
View(idp_raion)
# 1) calculate the correlation matrix
# select relevant columns for correlation
cor_data <- merged_data2 %>%
select(net_refugee_outflow, net_pop_change, mean_proportional_net_change, wf_intensity)
# Calculate the correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")
# Print the correlation matrix
print(cor_matrix)
# Visualize the correlation matrix using ggcorrplot
ggcorrplot(cor_matrix,
method = "circle",
type = "lower",
lab = TRUE,
lab_size = 3,
title = "Correlation Matrix",
ggtheme = theme_minimal())
# add geometry
map_data2 <- wf_idp_raion2 %>%
left_join(raions %>% select(ADM2_EN, geometry), by = c("raion_name" = "ADM2_EN"))
# convert raion_weekly to spatial data
map_data2 <- st_as_sf(map_data2, sf_column_name = 'geometry', crs = 4326)
# plot the map with interaction
tmap_mode("view")
map <- tm_shape(map_data2) +
tm_polygons("correlation", title = "War-Fire Events and Net Population Change Correlation")
# visualize map
map
# save the map to the output folder
tmap_save(map, filename = "output/map_war_fire_idp_net_change_correlation.png", dpi = 300)
# Create the scatterplot
scatter_plot <- ggplot(wf_idp_raion, aes(x = wf_intensity, y = net_pop_change, text = raion_name)) +
geom_point() +
labs(title = "Scatterplot between War-Fire Intensity and Net Population Change",
x = "Intensity",
y = "Net Population Change")
# Convert the scatterplot to an interactive plotly object
interactive_scatter <- ggplotly(scatter_plot, tooltip = "text")
# Create the map with only geometries
map_plot <- ggplot(map_data) +
geom_sf(color = "black", fill = NA) +
labs(title = "Map of Raions") +
theme_minimal()
# Convert the map to an interactive plotly object
interactive_map <- ggplotly(map_plot)
# Highlighting the raion in the map when interacting with the scatterplot
highlight_map <- function(raion_selected) {
highlighted_map <- ggplot(map_data) +
geom_sf(color = "black", fill = NA) +
geom_sf(data = map_data %>% filter(raion_name == raion_selected), fill = "red", alpha = 0.5) +
labs(title = paste("Map of Raions - Highlighted:", raion_selected)) +
theme_minimal()
ggplotly(highlighted_map)
}
ui <- fluidPage(
plotlyOutput("scatter_plot"),
plotlyOutput("map_plot")
)
server <- function(input, output, session) {
output$scatter_plot <- renderPlotly({
interactive_scatter %>%
onRender("
function(el, x) {
el.on('plotly_hover', function(event_data) {
Shiny.setInputValue('hover_event', event_data.points[0].text);
});
el.on('plotly_click', function(event_data) {
Shiny.setInputValue('click_event', event_data.points[0].text);
});
}
")
})
output$map_plot <- renderPlotly({
interactive_map
})
observeEvent(input$hover_event, {
output$map_plot <- renderPlotly({
highlight_map(input$hover_event)
})
})
observeEvent(input$click_event, {
output$map_plot <- renderPlotly({
highlight_map(input$click_event)
})
})
}
shinyApp(ui, server)
View(legend)
